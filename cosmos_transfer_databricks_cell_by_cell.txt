

# installation() - CELLS 1 THROUGH 6



##########CELL 0##################################################################
#python - set hugging face read token as an environment variable (so %sh can read it)

import os, json
os.environ["HUGGINGFACE_TOKEN"] = "hf_your_real_token_here"

######################################## CELL 0 #####################################


##########CELL 1 - STEP0: save shared variables#########################################################
##########Every %sh cell is a new shell. Sourcing cosmos_vars.SH in each cell keeps variables consistent.


%sh
cat <<'EOF' >/tmp/cosmos_vars.sh
# --------- STEP 0 ‚Äì VARIABLES ---------
REPO_URL="https://github.com/nvidia-cosmos/cosmos-transfer1.git"
ENV_NAME="cosmos-transfer1"
MINICONDA_DIR="/databricks/conda"
CHECKPOINT_DIR="/dbfs/ml/cosmos_ckpt"
VIDEO_URL="https://docs.nvidia.com/cosmos/latest/_static/transfer1-edge-detect.mp4"
VIDEO_FILE="assets/transfer1-edge-detect.mp4"
HF_TOKEN="${HUGGINGFACE_TOKEN:-<PUT‚ÄëYOUR‚ÄëTOKEN‚ÄëHERE>}"
EOF
echo "‚úÖ  Variables saved to /tmp/cosmos_vars.sh"


######################################## CELL 1 #####################################



#########CELL2 - STEP1: install / load Miniconda #####################################


%sh
source /tmp/cosmos_vars.sh

if [ ! -d "$MINICONDA_DIR" ]; then
  echo "‚û°Ô∏è  Installing Miniconda at $MINICONDA_DIR ‚Ä¶"
  wget -qO /tmp/miniconda.sh \
       https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
  bash /tmp/miniconda.sh -b -p "$MINICONDA_DIR"
else
  echo "üîÑ  Miniconda already present."
fi
source "$MINICONDA_DIR/etc/profile.d/conda.sh"
echo "‚úÖ  Miniconda ready."
######################################## CELL 2 #####################################


########CELL 3 - STEP2: clone (or refresh) the repo##################################


%sh
source /tmp/cosmos_vars.sh
if [ ! -d cosmos-transfer1 ]; then
  echo "‚û°Ô∏è  Cloning repo ‚Ä¶"
  git clone "$REPO_URL"
else
  echo "üîÑ  Repo exists ‚Äì pulling latest ‚Ä¶"
  ( cd cosmos-transfer1 && git pull )
fi
cd cosmos-transfer1
git submodule update --init --recursive
echo "‚úÖ  Repo ready."
########################################### CELL 3 #####################################



############CELL 4 - STEP3: create the Conda environment################################

%sh
source /tmp/cosmos_vars.sh
source "$MINICONDA_DIR/etc/profile.d/conda.sh"
if ! conda info --envs | grep -q "$ENV_NAME"; then
  echo "‚û°Ô∏è  Creating Conda env $ENV_NAME ‚Ä¶ (may take a while)"
  conda env create -f cosmos-transfer1.yaml -n "$ENV_NAME"
else
  echo "üîÑ  Env $ENV_NAME already exists."
fi
echo "‚úÖ  Env step done."


####################################### CELL 4 ###########################################


############CELL 5 - STEP4: install Python dependencies################################

%sh
source /tmp/cosmos_vars.sh
source "$MINICONDA_DIR/etc/profile.d/conda.sh"
echo "‚û°Ô∏è  Installing Python deps ‚Ä¶"
conda run -n "$ENV_NAME" pip install -r cosmos-transfer1/requirements.txt
conda run -n "$ENV_NAME" pip install 'transformer-engine[pytorch]==1.12.0'

# --- patch include paths (ignore errors) ---
CONDA_PREFIX="$MINICONDA_DIR/envs/$ENV_NAME"
ln -sf $CONDA_PREFIX/lib/python*/site-packages/nvidia/*/include/* \
      $CONDA_PREFIX/include/               2>/dev/null || true
ln -sf $CONDA_PREFIX/lib/python*/site-packages/nvidia/*/include/* \
      $CONDA_PREFIX/include/python*        2>/dev/null || true
echo "‚úÖ  Dependencies installed."


#################################### CELL 5 ##########################################


##################################CELL 6 - STEP 5: validate the environment############

%sh
source /tmp/cosmos_vars.sh
source "$MINICONDA_DIR/etc/profile.d/conda.sh"
echo "‚û°Ô∏è  Installing Python deps ‚Ä¶"
conda run -n "$ENV_NAME" pip install -r cosmos-transfer1/requirements.txt
conda run -n "$ENV_NAME" pip install 'transformer-engine[pytorch]==1.12.0'

# --- patch include paths (ignore errors) ---
CONDA_PREFIX="$MINICONDA_DIR/envs/$ENV_NAME"
ln -sf $CONDA_PREFIX/lib/python*/site-packages/nvidia/*/include/* \
      $CONDA_PREFIX/include/               2>/dev/null || true
ln -sf $CONDA_PREFIX/lib/python*/site-packages/nvidia/*/include/* \
      $CONDA_PREFIX/include/python*        2>/dev/null || true
echo "‚úÖ  Dependencies installed."

###################################### CELL 6 #############################################



# quickstart() - CELLS 7 AND 8

################################ CELL 7 - STEP6: HuggingFace non‚Äëinteractive login############################

%sh
source /tmp/cosmos_vars.sh
source "$MINICONDA_DIR/etc/profile.d/conda.sh"

if [[ "$HF_TOKEN" == "<PUT‚ÄëYOUR‚ÄëTOKEN‚ÄëHERE>" ]]; then
  echo "‚ùå  Edit /tmp/cosmos_vars.sh (HF_TOKEN) before running STEP8."
  exit 1
fi

echo "$HF_TOKEN" | conda run -n "$ENV_NAME" \
  huggingface-cli login --token "$HF_TOKEN" --stdin
echo "‚úÖ  HuggingFace login stored."


#################################################CELL 7 ######################################################



# generate_visual_simulation_from_video_source -

########################### CELL 8 - STEP 7: download the diffusion checkpoints (~300 GB) ##################


%sh
source /tmp/cosmos_vars.sh
source "$MINICONDA_DIR/etc/profile.d/conda.sh"
cd cosmos-transfer1
mkdir -p "$CHECKPOINT_DIR"

echo "‚¨áÔ∏è  Downloading checkpoints to $CHECKPOINT_DIR ‚Ä¶ (can take hours)"
conda run -n "$ENV_NAME" \
  CUDA_HOME="$MINICONDA_DIR/envs/$ENV_NAME" PYTHONPATH=$(pwd) \
  python scripts/download_diffusion_checkpoints.py \
    --checkpoint_dir "$CHECKPOINT_DIR" \
    --model_sizes 7B --model_types Text2World
echo "‚úÖ  Checkpoints ready."


########################################################## CELL 8 ##########################################

generate_visual_simulation_from_video_source() - CELLS 9 AND 10

#download the mp4 file from https://docs.nvidia.com/cosmos/latest/_static/transfer1-edge-detect.mp4 and place in folder "assets"
############################## CELL9 ‚Äî STEP8: download the demo video if needed #########################

%sh
source /tmp/cosmos_vars.sh
cd cosmos-transfer1
mkdir -p assets
if [ ! -f "$VIDEO_FILE" ]; then
  echo "‚¨áÔ∏è  Downloading demo video ‚Ä¶"
  curl -L "$VIDEO_URL" -o "$VIDEO_FILE"
else
  echo "üé¨  Video already present."
fi
echo "‚úÖ  Video step done."

###################################### CELL 9 #####################################################



########################## CELL10 - STEP9: generate the visual simulation ############################

%sh
source /tmp/cosmos_vars.sh
source "$MINICONDA_DIR/etc/profile.d/conda.sh"
cd cosmos-transfer1
export CUDA_VISIBLE_DEVICES=0
conda run -n "$ENV_NAME" \
  CUDA_HOME="$MINICONDA_DIR/envs/$ENV_NAME" PYTHONPATH=$(pwd) \
  python cosmos_transfer1/diffusion/inference/transfer.py \
    --checkpoint_dir "$CHECKPOINT_DIR" \
    --video_save_folder outputs/example1_single_control_edge \
    --controlnet_specs assets/inference_cosmos_transfer1_single_control_edge.json \
    --offload_text_encoder_model
echo "‚úÖ  Demo output ‚Üí cosmos-transfer1/outputs/example1_single_control_edge"


############################################# CELL 10 ######################################################